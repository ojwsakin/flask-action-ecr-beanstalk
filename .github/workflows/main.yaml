name: deploy toy project

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: deploy toy project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file
        id: env
        uses: ozaytsev86/create-env-file@v1
        with:
          ENV_AWS_ACCESS_KEY_ID: ${{ secrets.DB_AWS_ACCESS_KEY_ID }}
          ENV_AWS_SECRET_KEY: ${{ secrets.DB_AWS_SECRET_KEY }}

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD_HH-mm-ss
          utcOffset: "+09:00"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-web
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stock-web
          IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./nginx/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./nginx/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stock-server
          IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./flask/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./flask/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Generate deployment package 
        run: | 
          mkdir -p deploy
          cp -r .env deploy/.env
          cp docker-compose.yaml deploy/docker-compose.yaml
          cd deploy && zip -r deploy.zip .

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{secrets.EB_APP_NAME}}
          environment_name: ${{secrets.EB_ENV_NAME}}
          version_label: ${{secrets.EB_ENV_NAME}}-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: deploy/deploy.zip
          wait_for_environment_recovery: 200
